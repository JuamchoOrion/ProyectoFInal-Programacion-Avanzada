openapi: 3.0.3
info:
  title: API - Gestión de Alojamientos
  description: API para gestión de alojamientos, reservas y comentarios. Roles.
  version: "1.0.0"

servers:
  - url: http://localhost:8080
    description: Servidor local

tags:
  - name: Auth
  - name: Users
  - name: Hosts
  - name: Accommodations
  - name: Reservations
  - name: Comments
  - name: Search

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
      required:
        - error
        - message

    UserRegisterRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          description: "Mínimo 8 caracteres, incluir mayúscula y número"
        phone:
          type: string
        role:
          type: string
          enum: [USER, HOST]
        dateOfBirth:
          type: string
          format: date
      required: [name, email, password, phone, role, dateOfBirth]

    AuthRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
      required: [email, password]

    AuthResponse:
      type: object
      properties:
        token:
          type: string
        expiresIn:
          type: integer
        userId:
          type: integer

    UserProfile:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        role:
          type: string
        dateOfBirth:
          type: string
          format: date
        profilePhotoUrl:
          type: string
      required: [id, name, email, role]

    ChangePasswordRequest:
      type: object
      properties:
        currentPassword:
          type: string
        newPassword:
          type: string
      required: [currentPassword, newPassword]

    ResetPasswordRequest:
      type: object
      properties:
        email:
          type: string
          format: email
      required: [email]

    ResetPasswordConfirm:
      type: object
      properties:
        email:
          type: string
          format: email
        code:
          type: string
        newPassword:
          type: string
      required: [email, code, newPassword]

    Accommodation:
      type: object
      properties:
        id:
          type: integer
        hostId:
          type: integer
        title:
          type: string
        description:
          type: string
        city:
          type: string
        address:
          type: string
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: float
        pricePerNight:
          type: number
        maxGuests:
          type: integer
        services:
          type: array
          items:
            type: string
        images:
          type: array
          items:
            type: string
        mainImage:
          type: string
        status:
          type: string
          enum: [ACTIVE, DELETED]
      required: [id, hostId, title, city, pricePerNight, maxGuests, status]

    AccommodationCreateRequest:
      type: object
      properties:
        title: { type: string }
        description: { type: string }
        city: { type: string }
        address: { type: string }
        latitude: { type: number }
        longitude: { type: number }
        pricePerNight: { type: number }
        maxGuests: { type: integer }
        services:
          type: array
          items:
            type: string
        images:
          type: array
          items:
            type: string
        mainImage: { type: string }
      required: [title, city, pricePerNight, maxGuests]

    Reservation:
      type: object
      properties:
        id: { type: integer }
        accommodationId: { type: integer }
        userId: { type: integer }
        checkIn: { type: string, format: date }
        checkOut: { type: string, format: date }
        guests: { type: integer }
        totalPrice: { type: number }
        status:
          type: string
          enum: [PENDING, CONFIRMED, CANCELLED, COMPLETED]
      required: [id, accommodationId, userId, checkIn, checkOut, guests, status]

    ReservationCreateRequest:
      type: object
      properties:
        accommodationId: { type: integer }
        checkIn: { type: string, format: date }
        checkOut: { type: string, format: date }
        guests: { type: integer }
      required: [accommodationId, checkIn, checkOut, guests]

    Comment:
      type: object
      properties:
        id: { type: integer }
        reservationId: { type: integer }
        accommodationId: { type: integer }
        userId: { type: integer }
        rating:
          type: integer
          minimum: 1
          maximum: 5
        text:
          type: string
          maxLength: 500
        createdAt:
          type: string
          format: date-time
        hostReply:
          type: string
      required: [id, reservationId, accommodationId, userId, rating, createdAt]

    PagedAccommodations:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Accommodation"
        page: { type: integer }
        size: { type: integer }
        totalItems: { type: integer }
        totalPages: { type: integer }

  parameters:
    accommodationId:
      name: id
      in: path
      required: true
      schema:
        type: integer
    reservationId:
      name: id
      in: path
      required: true
      schema:
        type: integer
    userIdParam:
      name: id
      in: path
      required: true
      schema:
        type: integer

security:
  - {}

paths:

  /auth/register:
    post:
      tags: [Auth]
      summary: Registrar un usuario (USER o HOST)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegisterRequest"
      responses:
        "201":
          description: Usuario creado correctamente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "400":
          description: Bad Request (datos faltantes/formatos)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Conflict (email repetido)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/login:
    post:
      tags: [Auth]
      summary: Iniciar sesión (obtiene JWT)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthRequest"
      responses:
        "200":
          description: Login correcto
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/password/reset:
    post:
      tags: [Auth]
      summary: Solicitar código de recuperación (envía email con código, válido 15 min)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPasswordRequest"
      responses:
        "200":
          description: Código enviado
        "404":
          description: Email no registrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/password/confirm:
    post:
      tags: [Auth]
      summary: Confirmar recuperación con código y establecer nueva contraseña
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPasswordConfirm"
      responses:
        "200":
          description: Contraseña cambiada correctamente
        "400":
          description: Código inválido o expirado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /users/{id}:
    get:
      tags: [Users]
      summary: Obtener información de un usuario
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/userIdParam"
      responses:
        "200":
          description: Datos del usuario
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "401":
          description: Unauthorized
        "404":
          description: Usuario no existe
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    put:
      tags: [Users]
      summary: Actualizar perfil (nombre, teléfono, foto)
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/userIdParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                phone: { type: string }
                profilePhotoUrl: { type: string }
      responses:
        "200":
          description: Usuario actualizado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden (no tienes permisos para editar este usuario)
        "404":
          description: Usuario no existe

  /users/{id}/password:
    patch:
      tags: [Users]
      summary: Cambiar contraseña (con currentPassword)
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/userIdParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePasswordRequest"
      responses:
        "200":
          description: Contraseña cambiada correctamente
        "400":
          description: Datos inválidos
        "401":
          description: Unauthorized
        "403":
          description: Forbidden (currentPassword incorrecto)
        "404":
          description: Usuario no existe

  /accommodations:
    post:
      tags: [Accommodations]
      summary: Crear nuevo alojamiento (solo HOST)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccommodationCreateRequest"
      responses:
        "201":
          description: Alojamiento creado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Accommodation"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden (no eres host)

    get:
      tags: [Accommodations, Search]
      summary: Listar alojamientos (paginado). Ignora alojamientos con status=DELETED
      parameters:
        - name: city
          in: query
          schema:
            type: string
          description: Búsqueda por ciudad (predictiva en front)
        - name: checkIn
          in: query
          schema:
            type: string
            format: date
        - name: checkOut
          in: query
          schema:
            type: string
            format: date
        - name: minPrice
          in: query
          schema:
            type: number
        - name: maxPrice
          in: query
          schema:
            type: number
        - name: services
          in: query
          schema:
            type: string
          description: Comma-separated (wifi,piscina,...)
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: Lista paginada de alojamientos
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedAccommodations"

  /accommodations/{id}:
    get:
      tags: [Accommodations]
      summary: Obtener detalle completo de un alojamiento (galería, calendario, comentarios, promedio)
      parameters:
        - $ref: "#/components/parameters/accommodationId"
      responses:
        "200":
          description: Detalle del alojamiento
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Accommodation"
        "404":
          description: No encontrado

    put:
      tags: [Accommodations]
      summary: Editar alojamiento (solo dueño/host)
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/accommodationId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccommodationCreateRequest"
      responses:
        "200":
          description: Alojamiento actualizado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Accommodation"
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden (no eres dueño)
        "404":
          description: No encontrado

    delete:
      tags: [Accommodations]
      summary: Soft-delete de alojamiento (solo dueño) — sólo si no hay reservas futuras
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/accommodationId"
      responses:
        "200":
          description: Alojamiento marcado como DELETED
        "400":
          description: No se puede eliminar (existen reservas futuras)
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: No encontrado

  /hosts/{hostId}/accommodations:
    get:
      tags: [Hosts]
      summary: Listar alojamientos de un anfitrión
      security:
        - BearerAuth: []
      parameters:
        - name: hostId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Lista de alojamientos del host
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Accommodation"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden

  /reservations:
    post:
      tags: [Reservations]
      summary: Crear reserva (usuario)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReservationCreateRequest"
      responses:
        "201":
          description: Reserva creada (estado PENDING/CONFIRMED según flujo)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Reservation"
        "400":
          description: Fechas inválidas / solapamiento / supera capacidad / fechas pasadas
          content:
            application/json:
              $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized

    get:
      tags: [Reservations]
      summary: Listar reservas del usuario autenticado (o admin). Filtros por estado/fechas.
      security:
        - BearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [PENDING, CONFIRMED, CANCELLED, COMPLETED]
        - name: from
          in: query
          schema:
            type: string
            format: date
        - name: to
          in: query
          schema:
            type: string
            format: date
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: Lista de reservas paginada
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Reservation"
                  page: { type: integer }
                  size: { type: integer }
                  totalItems: { type: integer }
                  totalPages: { type: integer }

  /reservations/{id}/cancel:
    post:
      tags: [Reservations]
      summary: Cancelar reserva (usuario) - debe ser >48 horas antes del check-in para cancelar
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/reservationId"
      responses:
        "200":
          description: Reserva cancelada
        "400":
          description: Fuera del plazo / no se puede cancelar
        "401":
          description: Unauthorized
        "403":
          description: Forbidden

  /accommodations/{id}/comments:
    get:
      tags: [Comments]
      summary: Listar comentarios de un alojamiento (más recientes primero)
      parameters:
        - $ref: "#/components/parameters/accommodationId"
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: Lista paginada de comentarios
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Comment"
                  page: { type: integer }
                  size: { type: integer }
                  totalItems: { type: integer }
                  totalPages: { type: integer }

    post:
      tags: [Comments]
      summary: Añadir comentario (usuario) — solo si tiene reserva COMPLETED y 1 comentario máximo por reserva
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/accommodationId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reservationId: { type: integer }
                rating:
                  type: integer
                  minimum: 1
                  maximum: 5
                text:
                  type: string
                  maxLength: 500
              required: [reservationId, rating]
      responses:
        "201":
          description: Comentario creado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "400":
          description: No cumplió condición (no tuvo reserva completada / ya comentó / texto >500)
        "401":
          description: Unauthorized

  /comments/{id}/reply:
    post:
      tags: [Comments]
      summary: Responder comentario (solo anfitrión dueño del alojamiento)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reply:
                  type: string
              required: [reply]
      responses:
        "200":
          description: Respuesta añadida
        "401":
          description: Unauthorized
        "403":
          description: Forbidden (no eres propietario del alojamiento)
        "404":
          description: Comentario no encontrado

  /hosts/{hostId}/reservations:
    get:
      tags: [Hosts, Reservations]
      summary: Ver reservas para los alojamientos de un anfitrión (filtros por fechas/estado)
      security:
        - BearerAuth: []
      parameters:
        - name: hostId
          in: path
          required: true
          schema:
            type: integer
        - name: from
          in: query
          schema:
            type: string
            format: date
        - name: to
          in: query
            # small indent fix
            # continue
          # (ignored by parser)
        - name: status
          in: query
          schema:
            type: string
            enum: [PENDING, CONFIRMED, CANCELLED, COMPLETED]
      responses:
        "200":
          description: Lista de reservas
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Reservation"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden

  /metrics/accommodation/{id}:
    get:
      tags: [Hosts]
      summary: Métricas por alojamiento, número de reservas, promedio de calificaciones (filtro por rango de fechas)
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/accommodationId"
        - name: from
          in: query
          schema:
            type: string
            format: date
        - name: to
          in: query
          schema:
            type: string
            format: date
      responses:
        "200":
          description: Métricas
          content:
            application/json:
              schema:
                type: object
                properties:
                  reservationCount:
                    type: integer
                  averageRating:
                    type: number
                  period:
                    type: object
                    properties:
                      from: { type: string, format: date }
                      to: { type: string, format: date }
        "401":
          description: Unauthorized
        "403":
          description: Forbidden

components_example_notes: |
  # Notas de implementación (no forman parte del spec estándar):
  # - Al hacer soft-delete, cambiar status a DELETED; filtrar alojamientos en consultas públicas.
  # - Validaciones importantes:
  #   * Reserva: no solapamiento con reservas CONFIRMED/PENDING, mínimo 1 noche, no reservar fechas pasadas, capacidad máxima.
  #   * Comentario: sólo si reserva COMPLETED y check-out < hoy.
  # - Paginación por defecto: size=10.
  # - Enviar correos (notificaciones) al crear/ cancelar reservas y al agregar comentarios.